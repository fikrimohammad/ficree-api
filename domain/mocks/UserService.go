// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/fikrimohammad/ficree-api/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: params
func (_m *UserService) Create(params domain.UserCreateInput) (*domain.UserDetailOutput, error) {
	ret := _m.Called(params)

	var r0 *domain.UserDetailOutput
	if rf, ok := ret.Get(0).(func(domain.UserCreateInput) *domain.UserDetailOutput); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserDetailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.UserCreateInput) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields: id
func (_m *UserService) Destroy(id int) (*domain.UserDetailOutput, error) {
	ret := _m.Called(id)

	var r0 *domain.UserDetailOutput
	if rf, ok := ret.Get(0).(func(int) *domain.UserDetailOutput); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserDetailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: params
func (_m *UserService) List(params domain.UserListInput) ([]*domain.UserCompactOutput, error) {
	ret := _m.Called(params)

	var r0 []*domain.UserCompactOutput
	if rf, ok := ret.Get(0).(func(domain.UserListInput) []*domain.UserCompactOutput); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.UserCompactOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.UserListInput) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: id
func (_m *UserService) Show(id int) (*domain.UserDetailOutput, error) {
	ret := _m.Called(id)

	var r0 *domain.UserDetailOutput
	if rf, ok := ret.Get(0).(func(int) *domain.UserDetailOutput); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserDetailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, params
func (_m *UserService) Update(id int, params domain.UserUpdateInput) (*domain.UserDetailOutput, error) {
	ret := _m.Called(id, params)

	var r0 *domain.UserDetailOutput
	if rf, ok := ret.Get(0).(func(int, domain.UserUpdateInput) *domain.UserDetailOutput); ok {
		r0 = rf(id, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.UserDetailOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.UserUpdateInput) error); ok {
		r1 = rf(id, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
